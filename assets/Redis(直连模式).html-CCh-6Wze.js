import{_ as n,o as a,c as e,d as i}from"./app-nnBTm0Jw.js";const l={};function p(d,s){return a(),e("div",null,s[0]||(s[0]=[i(`<h1 id="redis模块-直连模式" tabindex="-1"><a class="header-anchor" href="#redis模块-直连模式"><span>Redis模块（直连模式）</span></a></h1><blockquote><h4 id="如何使用" tabindex="-1"><a class="header-anchor" href="#如何使用"><span>如何使用</span></a></h4></blockquote><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>引入模块</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>xml</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&lt;dependency&gt;</span></span>
<span class="line"><span>  &lt;groupId&gt;com.kingtsoft.pangu&lt;/groupId&gt;</span></span>
<span class="line"><span>  &lt;artifactId&gt;pangu-data-redis&lt;/artifactId&gt;</span></span>
<span class="line"><span>  &lt;version&gt;\${pangu.version}&lt;/version&gt;</span></span>
<span class="line"><span>&lt;/dependency&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>以下为使用案例</span></span>
<span class="line"><span>    accessSpeedLimit 			访问限定器</span></span>
<span class="line"><span>    DistributedLockTemplate 	分布式锁工具</span></span>
<span class="line"><span>    DistributedReentrantLock 	分布式重入锁工具</span></span>
<span class="line"><span>    SequenceTemplate 			序列生成工具</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>java</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>/**</span></span>
<span class="line"><span> * Title: &lt;br&gt;</span></span>
<span class="line"><span> * Description: &lt;br&gt;</span></span>
<span class="line"><span> * Company: KingTang &lt;br&gt;</span></span>
<span class="line"><span> *</span></span>
<span class="line"><span> * @author 金炀</span></span>
<span class="line"><span> * @version 1.0</span></span>
<span class="line"><span> */</span></span>
<span class="line"><span>@Slf4j</span></span>
<span class="line"><span>@ExtendWith({SpringExtension.class})</span></span>
<span class="line"><span>@AutoConfigureMockMvc</span></span>
<span class="line"><span>@SpringBootTest(classes= {PanguBoot.class})</span></span>
<span class="line"><span>public class  RedisTest {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Autowired</span></span>
<span class="line"><span>private AccessSpeedLimit accessSpeedLimit;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Autowired</span></span>
<span class="line"><span>    @Qualifier(&quot;redisDefaultTemplate&quot;)</span></span>
<span class="line"><span>private RedisTemplate&lt;String, Object&gt; redisTemplate;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @ParameterizedTest</span></span>
<span class="line"><span>    @ValueSource(strings= {&quot;test&quot;})</span></span>
<span class="line"><span>private void   testTran(String test) throws Exception {</span></span>
<span class="line"><span>        SimpleDateFormat sdf =newSimpleDateFormat(&quot; mm:ss&quot;);</span></span>
<span class="line"><span>while (true) {</span></span>
<span class="line"><span>//10.0.0.1这个ip每1秒钟最多访问5次if块内代码</span></span>
<span class="line"><span>if (accessSpeedLimit.tryAccess(&quot;10.0.0.1&quot;, 1, 5)) {</span></span>
<span class="line"><span>                System.out.println(&quot;yes&quot;+ sdf.format(newDate()));</span></span>
<span class="line"><span>            } else {</span></span>
<span class="line"><span>                System.out.println(&quot;no&quot;+ sdf.format(newDate()));</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span>            Thread.sleep(100);</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Autowired</span></span>
<span class="line"><span>private DistributedLockTemplate template;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @ParameterizedTest</span></span>
<span class="line"><span>    @ValueSource(strings= {&quot;test&quot;})</span></span>
<span class="line"><span>private void   testLock(String test) {</span></span>
<span class="line"><span>//本类线程安全,可通过spring注入</span></span>
<span class="line"><span>//获取锁超时时间为5秒</span></span>
<span class="line"><span>        template.execute(&quot;订单流水号&quot;, 5000, newCallback() {</span></span>
<span class="line"><span>            @Override</span></span>
<span class="line"><span>public Object onGetLock() {</span></span>
<span class="line"><span>//TODO 获得锁后要做的事</span></span>
<span class="line"><span>returnnull;</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>            @Override</span></span>
<span class="line"><span>public Object onTimeout() {</span></span>
<span class="line"><span>//TODO 获得锁超时后要做的事</span></span>
<span class="line"><span>returnnull;</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span>        });</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @ParameterizedTest</span></span>
<span class="line"><span>    @ValueSource(strings= {&quot;test&quot;})</span></span>
<span class="line"><span>private void   testLock2(String test) {</span></span>
<span class="line"><span>        DistributedReentrantLock lock =newRedisReentrantLock(redisTemplate, &quot;订单流水号&quot;);</span></span>
<span class="line"><span>try {</span></span>
<span class="line"><span>if (lock.tryLock(5000L, TimeUnit.MILLISECONDS)) {//获取锁超时时间为5秒</span></span>
<span class="line"><span>//TODO 获得锁后要做的事</span></span>
<span class="line"><span>                System.out.println(&quot;getLock&quot;);</span></span>
<span class="line"><span>            } else {</span></span>
<span class="line"><span>//TODO 获得锁超时后要做的事</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span>        } finally {</span></span>
<span class="line"><span>            lock.unlock();</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Autowired</span></span>
<span class="line"><span>private SequenceTemplate sequenceTemplate;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @ParameterizedTest</span></span>
<span class="line"><span>    @ValueSource(strings= {&quot;test&quot;})</span></span>
<span class="line"><span>private void   testSeq(String test) {</span></span>
<span class="line"><span>        long  ret = sequenceTemplate.sequence(&quot;cis_id&quot;, 10000L);</span></span>
<span class="line"><span>        System.out.println(ret);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>PgRedisTemplate工具</p></blockquote><p><strong>java</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>package com.kingtsoft.pangu.data.redis;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import org.springframework.data.redis.core.*;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import java.util.*;</span></span>
<span class="line"><span>import java.util.concurrent.TimeUnit;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>/**</span></span>
<span class="line"><span> * Title: &lt;br&gt;</span></span>
<span class="line"><span> * Description: &lt;br&gt;</span></span>
<span class="line"><span> * Company: KingTang &lt;br&gt;</span></span>
<span class="line"><span> *</span></span>
<span class="line"><span> * @author 金炀</span></span>
<span class="line"><span> * @version 1.0</span></span>
<span class="line"><span> */</span></span>
<span class="line"><span>public class  PgRedisTemplate&lt;K, V&gt; extendsRedisTemplate&lt;K, V&gt; {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>privatestaticfinal TimeUnit DEFAULT_TIME_UNIT = TimeUnit.SECONDS;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 根据key 获取过期时间</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @paramkey 键 不能为null</span></span>
<span class="line"><span>     * @return 时间(秒) 返回0代表为永久有效，-2代表键不存在</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>publiclong getExpireTime(K key) {</span></span>
<span class="line"><span>        long  expire =this.getExpire(key, DEFAULT_TIME_UNIT);</span></span>
<span class="line"><span>if (expire !=null) {</span></span>
<span class="line"><span>return expire;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>return-2;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 指定缓存失效时间</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @paramkey        键</span></span>
<span class="line"><span>     * @paramexpireTime 时间(秒)</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>public boolean   setExpireTime(K key, long expireTime) {</span></span>
<span class="line"><span>if (expireTime &gt;0) {</span></span>
<span class="line"><span>returnthis.expire(key, expireTime, DEFAULT_TIME_UNIT);</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>thrownewRuntimeException(&quot;过期时间必须大于0&quot;);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 移除指定 key 的过期时间</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @paramkey 键</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>private void   removeExpireTime(K key) {</span></span>
<span class="line"><span>this.boundValueOps(key).persist();</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 设置分布式锁</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @paramkey    键，可以用用户主键</span></span>
<span class="line"><span>     * @paramvalue  值，可以传requestId，可以保证锁不会被其他请求释放，增加可靠性</span></span>
<span class="line"><span>     * @paramexpire 锁的时间(秒)</span></span>
<span class="line"><span>     * @return 设置成功为 true</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>public boolean   setNx(K key, V value, long expire) {</span></span>
<span class="line"><span>returnthis.opsForValue().setIfAbsent(key, value, expire, DEFAULT_TIME_UNIT);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 设置分布式锁，有等待时间</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @paramkey     键，可以用用户主键</span></span>
<span class="line"><span>     * @paramvalue   值，可以传requestId，可以保证锁不会被其他请求释放，增加可靠性</span></span>
<span class="line"><span>     * @paramexpire  锁的时间(秒)</span></span>
<span class="line"><span>     * @paramtimeout 在timeout时间内仍未获取到锁，则获取失败</span></span>
<span class="line"><span>     * @return 设置成功为 true</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>public boolean   setNx(K key, V value, long expire, long timeout) {</span></span>
<span class="line"><span>long  start = System.currentTimeMillis();</span></span>
<span class="line"><span>//在一定时间内获取锁，超时则返回错误</span></span>
<span class="line"><span>for (; ; ) {</span></span>
<span class="line"><span>// 获取到锁，并设置过期时间返回true</span></span>
<span class="line"><span>if (boolean  .TRUE.equals(this.opsForValue().setIfAbsent(key, value, expire, DEFAULT_TIME_UNIT))) {</span></span>
<span class="line"><span>returntrue;</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span>//否则循环等待，在timeout时间内仍未获取到锁，则获取失败</span></span>
<span class="line"><span>if (System.currentTimeMillis() - start &gt; timeout) {</span></span>
<span class="line"><span>returnfalse;</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 释放分布式锁</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @paramkey   锁</span></span>
<span class="line"><span>     * @paramvalue 值，可以传requestId，可以保证锁不会被其他请求释放，增加可靠性</span></span>
<span class="line"><span>     * @return 成功返回true, 失败返回false</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>publicboolean  releaseNx(K key, V value) {</span></span>
<span class="line"><span>        Object currentValue =this.opsForValue().get(key);</span></span>
<span class="line"><span>if (String.valueOf(currentValue) !=null&amp;&amp; value.equals(currentValue)) {</span></span>
<span class="line"><span>return boolean  .TRUE.equals(this.opsForValue().getOperations().delete(key));</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>returnfalse;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 普通缓存放入</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @paramkey   键</span></span>
<span class="line"><span>     * @paramvalue 值</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>private void   set(K key, V value) {</span></span>
<span class="line"><span>this.opsForValue().set(key, value);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 普通缓存放入并设置时间</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @paramkey   键</span></span>
<span class="line"><span>     * @paramvalue 值</span></span>
<span class="line"><span>     * @paramtime  时间(秒) time要大于0 如果time小于等于0 将设置无限期</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>private void   set(K key, V value, long time) {</span></span>
<span class="line"><span>if (time &gt;0) {</span></span>
<span class="line"><span>this.opsForValue().set(key, value, time, DEFAULT_TIME_UNIT);</span></span>
<span class="line"><span>        } else {</span></span>
<span class="line"><span>this.opsForValue().set(key, value);</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * value增加值</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @paramkey    键</span></span>
<span class="line"><span>     * @paramnumber 增加的值</span></span>
<span class="line"><span>     * @return 返回增加后的值</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>public long  incrBy(String key, long number) {</span></span>
<span class="line"><span>return (long ) this.execute((RedisCallback&lt;Object&gt;) connection -&gt; connection.incrBy(key.getBytes(), number));</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * value减少值</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @paramkey    键</span></span>
<span class="line"><span>     * @paramnumber 减少的值</span></span>
<span class="line"><span>     * @return 返回减少后的值</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>public long  decrBy(String key, long number) {</span></span>
<span class="line"><span>return (long ) this.execute((RedisCallback&lt;Object&gt;) connection -&gt; connection.decrBy(key.getBytes(), number));</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 根据key获取value</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @paramkey 键</span></span>
<span class="line"><span>     * @return 返回值</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>public V get(K key) {</span></span>
<span class="line"><span>        BoundValueOperations&lt;K, V&gt; boundValueOperations =this.boundValueOps(key);</span></span>
<span class="line"><span>return boundValueOperations.get();</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// list 类型操作</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 将value从右边放入缓存</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @paramkey   键</span></span>
<span class="line"><span>     * @paramvalue 值</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>private void   listRightPush(K key, V value) {</span></span>
<span class="line"><span>        ListOperations&lt;K, V&gt; listOperations =this.opsForList();</span></span>
<span class="line"><span>//从队列右插入</span></span>
<span class="line"><span>        listOperations.rightPush(key, value);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 将value从左边放入缓存</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @paramkey   键</span></span>
<span class="line"><span>     * @paramvalue 值</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>private void   listLeftPush(K key, V value) {</span></span>
<span class="line"><span>        ListOperations&lt;K, V&gt; listOperations =this.opsForList();</span></span>
<span class="line"><span>//从队列右插入</span></span>
<span class="line"><span>        listOperations.leftPush(key, value);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 将list从右边放入缓存</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @paramkey   键</span></span>
<span class="line"><span>     * @paramvalue 值</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>public long  listRightPushAll(K key, List&lt;V&gt; value) {</span></span>
<span class="line"><span>returnthis.opsForList().rightPushAll(key, value);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 将list从左边放入缓存</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @paramkey   键</span></span>
<span class="line"><span>     * @paramvalue 值</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>public long  listLeftPushAll(K key, List&lt;V&gt; value) {</span></span>
<span class="line"><span>returnthis.opsForList().leftPushAll(key, value);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 通过索引 获取list中的值</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @paramkey   键</span></span>
<span class="line"><span>     * @paramindex 索引 index&gt;=0时， 0 表头，1 第二个元素，依次类推；index&lt;0时，-1，表尾，-2倒数第二个元素，依次类推</span></span>
<span class="line"><span>     * @return 返回列表中的值</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>public V listGetWithIndex(K key, long index) {</span></span>
<span class="line"><span>        ListOperations&lt;K, V&gt; listOperations =this.opsForList();</span></span>
<span class="line"><span>return listOperations.index(key, index);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 从list左边弹出一条数据</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @paramkey 键</span></span>
<span class="line"><span>     * @return 队列中的值</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>public V listLeftPop(K key) {</span></span>
<span class="line"><span>        ListOperations&lt;K, V&gt; listOperations =this.opsForList();</span></span>
<span class="line"><span>return listOperations.leftPop(key);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 从list左边定时弹出一条</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @paramkey     键</span></span>
<span class="line"><span>     * @paramtimeout 弹出时间</span></span>
<span class="line"><span>     * @paramunit    时间单位</span></span>
<span class="line"><span>     * @return 队列中的值</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>public V listLeftPop(K key, long timeout, TimeUnit unit) {</span></span>
<span class="line"><span>        ListOperations&lt;K, V&gt; listOperations =this.opsForList();</span></span>
<span class="line"><span>return listOperations.leftPop(key, timeout, unit);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 从list右边弹出一条数据</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @paramkey 键</span></span>
<span class="line"><span>     * @return 队列中的值</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>public V listRightPop(K key) {</span></span>
<span class="line"><span>        ListOperations&lt;K, V&gt; listOperations =this.opsForList();</span></span>
<span class="line"><span>return listOperations.rightPop(key);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 从list左边定时弹出</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @paramkey     键</span></span>
<span class="line"><span>     * @paramtimeout 弹出时间</span></span>
<span class="line"><span>     * @paramunit    时间单位</span></span>
<span class="line"><span>     * @return 队列中的值</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>public V listRightPop(K key, long timeout, TimeUnit unit) {</span></span>
<span class="line"><span>        ListOperations&lt;K, V&gt; listOperations =this.opsForList();</span></span>
<span class="line"><span>return listOperations.leftPop(key, timeout, unit);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 获取list缓存的内容</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @paramkey   键</span></span>
<span class="line"><span>     * @paramstart 开始下标</span></span>
<span class="line"><span>     * @paramend   结束下标  0 到 -1 代表所有值</span></span>
<span class="line"><span>     * @return list内容</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>public List&lt;V&gt; listRange(K key, long start, long end) {</span></span>
<span class="line"><span>        ListOperations&lt;K, V&gt; listOperations =this.opsForList();</span></span>
<span class="line"><span>return listOperations.range(key, start, end);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 获取list缓存的长度</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @paramkey 键</span></span>
<span class="line"><span>     * @return list长度</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>publiclong listSize(K key) {</span></span>
<span class="line"><span>        long  size =this.opsForList().size(key);</span></span>
<span class="line"><span>return Objects.requireNonNullElse(size, 0).long Value();</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 根据索引修改list中的某条数据</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @paramkey   键</span></span>
<span class="line"><span>     * @paramindex 下标</span></span>
<span class="line"><span>     * @paramvalue 值</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>private void   listSet(K key, long index, V value) {</span></span>
<span class="line"><span>this.opsForList().set(key, index, value);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 从lit中移除N个值为value的值</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @paramkey   键</span></span>
<span class="line"><span>     * @paramcount 移除多少个</span></span>
<span class="line"><span>     * @paramvalue 值</span></span>
<span class="line"><span>     * @return 移除的个数</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>publiclong listRemove(K key, long count, V value) {</span></span>
<span class="line"><span>        long  count1 =this.opsForList().remove(key, count, value);</span></span>
<span class="line"><span>if (count1 !=null) {</span></span>
<span class="line"><span>return count1;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>return0;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// hash 类型操作</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 根据key和键获取value</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @paramkey  键 不能为null</span></span>
<span class="line"><span>     * @paramitem 项 不能为null</span></span>
<span class="line"><span>     * @return 值</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>public &lt;HK, HV&gt; HV hashGet(K key, String item) {</span></span>
<span class="line"><span>        HashOperations&lt;K, HK, HV&gt; hashOperations =this.opsForHash();</span></span>
<span class="line"><span>return hashOperations.get(key, item);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 获取key对应的所有键值</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @paramkey 键</span></span>
<span class="line"><span>     * @return 对应的多个键值</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>public &lt;HK, HV&gt; Map&lt;HK, HV&gt; hashMultiGet(K key) {</span></span>
<span class="line"><span>        HashOperations&lt;K, HK, HV&gt; hashOperations =this.opsForHash();</span></span>
<span class="line"><span>return hashOperations.entries(key);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 添加map到hash中</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @paramkey 键</span></span>
<span class="line"><span>     * @parammap 对应多个键值</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>private void   hashMultiSet(K key, Map&lt;String, Object&gt; map) {</span></span>
<span class="line"><span>this.opsForHash().putAll(key, map);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 添加map到hash中，并设置过期时间</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @paramkey        键</span></span>
<span class="line"><span>     * @parammap        对应多个键值</span></span>
<span class="line"><span>     * @paramexpireTime 时间(秒)</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>private void   hashMultiSet(K key, Map&lt;String, Object&gt; map, long expireTime) {</span></span>
<span class="line"><span>this.opsForHash().putAll(key, map);</span></span>
<span class="line"><span>if (expireTime &gt;0) {</span></span>
<span class="line"><span>this.expire(key, expireTime, DEFAULT_TIME_UNIT);</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 向hash表中放入一个数据</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @paramkey   键</span></span>
<span class="line"><span>     * @paramhKey  map 的键</span></span>
<span class="line"><span>     * @paramvalue 值</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>public &lt;HK, HV&gt; voidhashPut(K key, HK hKey, HV value) {</span></span>
<span class="line"><span>        HashOperations&lt;K, HK, HV&gt; hashOperations =this.opsForHash();</span></span>
<span class="line"><span>        hashOperations.put(key, hKey, value);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 向hash表中放入一个数据，并设置过期时间</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @paramkey        键</span></span>
<span class="line"><span>     * @paramhKey       map 的键</span></span>
<span class="line"><span>     * @paramvalue      值</span></span>
<span class="line"><span>     * @paramexpireTime 时间(秒) 注意:如果已存在的hash表有时间,这里将会替换原有的时间</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>public &lt;HK, HV&gt; voidhashPut(K key, HK hKey, HV value, long expireTime) {</span></span>
<span class="line"><span>this.opsForHash().put(key, hKey, value);</span></span>
<span class="line"><span>if (expireTime &gt;0) {</span></span>
<span class="line"><span>this.expire(key, expireTime, DEFAULT_TIME_UNIT);</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 判断hash表中是否有该项的值</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @paramkey  键 不能为null</span></span>
<span class="line"><span>     * @paramhKey map 的键 不能为null</span></span>
<span class="line"><span>     * @return true 存在 false不存在</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>public &lt;HK, HV&gt; boolean  hashHasKey(K key, HK hKey) {</span></span>
<span class="line"><span>        HashOperations&lt;K, HK, HV&gt; hashOperations =this.opsForHash();</span></span>
<span class="line"><span>return hashOperations.hasKey(key, hKey);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 取出所有 value</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @paramkey 键</span></span>
<span class="line"><span>     * @return map 中所有值</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>public &lt;HK, HV&gt; List&lt;HV&gt; hashValues(K key) {</span></span>
<span class="line"><span>        HashOperations&lt;K, HK, HV&gt; hashOperations =this.opsForHash();</span></span>
<span class="line"><span>return hashOperations.values(key);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 取出所有 hKey</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @paramkey 键</span></span>
<span class="line"><span>     * @return map 所有的键</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>public &lt;HK, HV&gt; Set&lt;HK&gt; hashHKeys(K key) {</span></span>
<span class="line"><span>        HashOperations&lt;K, HK, HV&gt; hashOperations =this.opsForHash();</span></span>
<span class="line"><span>return hashOperations.keys(key);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 删除hash表中的键值，并返回删除个数</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @paramkey      键</span></span>
<span class="line"><span>     * @paramhashKeys 要删除的值的键</span></span>
<span class="line"><span>     * @return 删除个数</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>public &lt;HK, HV&gt; long  hashDelete(K key, Object... hashKeys) {</span></span>
<span class="line"><span>        HashOperations&lt;K, HK, HV&gt; hashOperations =this.opsForHash();</span></span>
<span class="line"><span>return hashOperations.delete(key, hashKeys);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// set 类型操作</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 将数据放入set缓存</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @paramkey    键</span></span>
<span class="line"><span>     * @paramvalues 值 可以是多个</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    @SafeVarargs</span></span>
<span class="line"><span>publicfinal long  setAdd(K key, V... values) {</span></span>
<span class="line"><span>returnthis.opsForSet().add(key, values);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 将set数据放入缓存，并设置过期时间</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @paramkey        键</span></span>
<span class="line"><span>     * @paramexpireTime 时间(秒)</span></span>
<span class="line"><span>     * @paramvalues     值 可以是多个</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    @SafeVarargs</span></span>
<span class="line"><span>publicfinal long  setAdd(K key, long expireTime, V... values) {</span></span>
<span class="line"><span>        long  ret =this.opsForSet().add(key, values);</span></span>
<span class="line"><span>if (expireTime &gt;0) {</span></span>
<span class="line"><span>this.expire(key, expireTime, DEFAULT_TIME_UNIT);</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>return ret;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 获取set缓存的长度</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @paramkey 键</span></span>
<span class="line"><span>     * @return set缓存的长度</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>publiclong setSize(K key) {</span></span>
<span class="line"><span>        long  size =this.opsForSet().size(key);</span></span>
<span class="line"><span>if (size !=null) {</span></span>
<span class="line"><span>return size;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>return0;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 根据key获取Set中的所有值</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @paramkey 键</span></span>
<span class="line"><span>     * @return Set中的所有值</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>public Set&lt;V&gt; setValues(K key) {</span></span>
<span class="line"><span>        SetOperations&lt;K, V&gt; setOperations =this.opsForSet();</span></span>
<span class="line"><span>return setOperations.members(key);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 根据value从一个set中查询,是否存在</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @paramkey   键</span></span>
<span class="line"><span>     * @paramvalue 要查询的值</span></span>
<span class="line"><span>     * @return true 存在 false不存在</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>publicboolean  setHasKey(K key, V value) {</span></span>
<span class="line"><span>return boolean  .TRUE.equals(this.opsForSet().isMember(key, value));</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 根据value删除，并返回删除的个数</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @paramkey   键</span></span>
<span class="line"><span>     * @paramvalue 要删除的值</span></span>
<span class="line"><span>     * @return 删除的个数</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>public long  setDelete(K key, Object... value) {</span></span>
<span class="line"><span>        SetOperations&lt;K, V&gt; setOperations =this.opsForSet();</span></span>
<span class="line"><span>return setOperations.remove(key, value);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// zset 类型操作</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 在 zset中插入一条数据</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @paramkey   键</span></span>
<span class="line"><span>     * @paramvalue 要插入的值</span></span>
<span class="line"><span>     * @paramscore 设置分数</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>private void   zSetAdd(K key, V value, long score) {</span></span>
<span class="line"><span>        ZSetOperations&lt;K, V&gt; zSetOperations =this.opsForZSet();</span></span>
<span class="line"><span>        zSetOperations.add(key, value, score);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 得到分数在 score1，score2 之间的值</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @paramkey    键</span></span>
<span class="line"><span>     * @paramscore1 起始分数</span></span>
<span class="line"><span>     * @paramscore2 终止分数</span></span>
<span class="line"><span>     * @return 范围内所有值</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>public Set&lt;V&gt; zSetValuesRange(K key, long score1, long score2) {</span></span>
<span class="line"><span>        ZSetOperations&lt;K, V&gt; zSetOperations =this.opsForZSet();</span></span>
<span class="line"><span>return zSetOperations.range(key, score1, score2);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 根据value删除，并返回删除个数</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @paramkey   键</span></span>
<span class="line"><span>     * @paramvalue 要删除的值，可传入多个</span></span>
<span class="line"><span>     * @return 删除个数</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>public long  zSetDeleteByValue(K key, Object... value) {</span></span>
<span class="line"><span>        ZSetOperations&lt;K, V&gt; zSetOperations =this.opsForZSet();</span></span>
<span class="line"><span>return zSetOperations.remove(key, value);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 根据下标范围删除，并返回删除个数</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @paramkey   键</span></span>
<span class="line"><span>     * @paramsize1 起始下标</span></span>
<span class="line"><span>     * @paramsize2 结束下标</span></span>
<span class="line"><span>     * @return 删除个数</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>public long  zSetDeleteRange(K key, long size1, long size2) {</span></span>
<span class="line"><span>        ZSetOperations&lt;K, V&gt; zSetOperations =this.opsForZSet();</span></span>
<span class="line"><span>return zSetOperations.removeRange(key, size1, size2);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 删除分数区间内元素，并返回删除个数</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @paramkey    键</span></span>
<span class="line"><span>     * @paramscore1 起始分数</span></span>
<span class="line"><span>     * @paramscore2 终止分数</span></span>
<span class="line"><span>     * @return 删除个数</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>public long  zSetDeleteByScore(K key, long score1, long score2) {</span></span>
<span class="line"><span>        ZSetOperations&lt;K, V&gt; zSetOperations =this.opsForZSet();</span></span>
<span class="line"><span>return zSetOperations.removeRangeByScore(key, score1, score2);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>常用方法</p></blockquote><p><strong>java</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>redisTemplate.hasKey(key);				//判断是否有key所对应的值，有则返回true，没有则返回false</span></span>
<span class="line"><span>redisTemplate.opsForValue().get(key);	//有则取出key值所对应的值</span></span>
<span class="line"><span>redisTemplate.delete(key);				//删除单个key值</span></span>
<span class="line"><span>redisTemplate.delete(keys); 			//其中keys:Collection&lt;K&gt; keys</span></span>
<span class="line"><span>redisTemplate.dump(key);				//将当前传入的key值序列化为byte[]类型</span></span>
<span class="line"><span>redisTemplate.expire(key, timeout, unit);	//设置过期时间</span></span>
<span class="line"><span>redisTemplate.expireAt(key, date);		//设置过期时间</span></span>
<span class="line"><span>redisTemplate.keys(pattern);			//查找匹配的key值，返回一个Set集合类型</span></span>
<span class="line"><span>redisTemplate.rename(oldKey, newKey);	//返回传入key所存储的值的类型</span></span>
<span class="line"><span>redisTemplate.renameIfAbsent(oldKey, newKey);	//如果旧值存在时，将旧值改为新值</span></span>
<span class="line"><span>redisTemplate.randomKey();				//从redis中随机取出一个key</span></span>
<span class="line"><span>redisTemplate.getExpire(key);			//返回当前key所对应的剩余过期时间</span></span>
<span class="line"><span>redisTemplate.getExpire(key, unit);		//返回剩余过期时间并且指定时间单位</span></span>
<span class="line"><span>redisTemplate.persist(key);				//将key持久化保存</span></span>
<span class="line"><span>redisTemplate.move(key, dbIndex);		//将当前数据库的key移动到指定redis中数据库当中</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>String类型</p></blockquote><p><strong>java</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>opsForValue.set(key, value);					//设置当前的key以及value值</span></span>
<span class="line"><span>opsForValue.set(key, value, offset);			//用 value 参数覆写给定 key 所储存的字符串值，从偏移量 offset 开始</span></span>
<span class="line"><span>opsForValue.set(key, value, timeout, unit);	 	//设置当前的key以及value值并且设置过期时间</span></span>
<span class="line"><span>opsForValue.setBit(key, offset, value);		 	//将二进制第offset位值变为value</span></span>
<span class="line"><span>opsForValue.setIfAbsent(key, value);			//重新设置key对应的值，如果存在返回false，否则返回true</span></span>
<span class="line"><span>opsForValue.get(key, start, end);				//返回key中字符串的子字符</span></span>
<span class="line"><span>opsForValue.getAndSet(key, value);				//将旧的key设置为value，并且返回旧的key</span></span>
<span class="line"><span>opsForValue.multiGet(keys);						//批量获取值</span></span>
<span class="line"><span>opsForValue.size(key);							//获取字符串的长度</span></span>
<span class="line"><span>opsForValue.append(key, value);					//在原有的值基础上新增字符串到末尾</span></span>
<span class="line"><span>opsForValue.increment(key,double increment);	//以增量的方式将double值存储在变量中</span></span>
<span class="line"><span>opsForValue.increment(key,long   increment);		//通过increment(K key, long  delta)方法以增量方式存储long 值（正值则自增，负值则自减）</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Map valueMap =newHashMap();  </span></span>
<span class="line"><span>valueMap.put(&quot;valueMap1&quot;,&quot;map1&quot;);  </span></span>
<span class="line"><span>valueMap.put(&quot;valueMap2&quot;,&quot;map2&quot;);  </span></span>
<span class="line"><span>valueMap.put(&quot;valueMap3&quot;,&quot;map3&quot;);  </span></span>
<span class="line"><span>opsForValue.multiSetIfAbsent(valueMap); 		//如果对应的map集合名称不存在，则添加否则不做修改</span></span>
<span class="line"><span>opsForValue.multiSet(valueMap);					//设置map集合到redis</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Hash类型</p></blockquote><p><strong>java</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>opsForHash.get(key, field);				//获取变量中的指定map键是否有值,如果存在该map键则获取值，没有则返回null</span></span>
<span class="line"><span>opsForHash.entries(key);				//获取变量中的键值对</span></span>
<span class="line"><span>opsForHash.put(key, hashKey, value);	//新增hashMap值</span></span>
<span class="line"><span>opsForHash.putAll(key, maps);			//以map集合的形式添加键值对</span></span>
<span class="line"><span>opsForHash.putIfAbsent(key, hashKey, value);	//仅当hashKey不存在时才设置</span></span>
<span class="line"><span>opsForHash.delete(key, fields);			//删除一个或者多个hash表字段</span></span>
<span class="line"><span>opsForHash.hasKey(key, field);			//查看hash表中指定字段是否存在</span></span>
<span class="line"><span>opsForHash.increment(key, field, long  increment);	//给哈希表key中的指定字段的整数值加上增量increment</span></span>
<span class="line"><span>opsForHash.increment(key, field, double increment);	//给哈希表key中的指定字段的整数值加上增量increment</span></span>
<span class="line"><span>opsForHash.keys(key);					//获取所有hash表中字段</span></span>
<span class="line"><span>opsForHash.values(key);					//获取hash表中存在的所有的值</span></span>
<span class="line"><span>opsForHash.scan(key, options);			//匹配获取键值对，ScanOptions.NONE为获取全部键对</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>List类型</p></blockquote><p><strong>java</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>opsForList.index(key, index);				//通过索引获取列表中的元素</span></span>
<span class="line"><span>opsForList.range(key, start, end);			//获取列表指定范围内的元素(start开始位置, 0是开始位置，end 结束位置, -1返回所有)</span></span>
<span class="line"><span>opsForList.leftPush(key, value);			//存储在list的头部，即添加一个就把它放在最前面的索引处</span></span>
<span class="line"><span>opsForList.leftPush(key, pivot, value);		//如果pivot处值存在则在pivot前面添加</span></span>
<span class="line"><span>opsForList.leftPushAll(key, value);			//把多个值存入List中(value可以是多个值，也可以是一个Collection value)</span></span>
<span class="line"><span>opsForList.leftPushIfPresent(key, value);	//List存在的时候再加入</span></span>
<span class="line"><span>opsForList.rightPush(key, value);			//按照先进先出的顺序来添加(value可以是多个值，或者是Collection var2)</span></span>
<span class="line"><span>opsForList.rightPushAll(key, value);		//在pivot元素的右边添加值</span></span>
<span class="line"><span>opsForList.set(key, index, value);			//设置指定索引处元素的值</span></span>
<span class="line"><span>opsForList.trim(key, start, end);			//将List列表进行剪裁</span></span>
<span class="line"><span>opsForList.size(key);						//获取当前key的List列表长度</span></span>
<span class="line"><span></span></span>
<span class="line"><span>//移除并获取列表中第一个元素(如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止)</span></span>
<span class="line"><span>opsForList.leftPop(key);			</span></span>
<span class="line"><span>opsForList.leftPop(key, timeout, unit);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>//移除并获取列表最后一个元素</span></span>
<span class="line"><span>opsForList.rightPop(key);</span></span>
<span class="line"><span>opsForList.rightPop(key, timeout, unit);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>//从一个队列的右边弹出一个元素并将这个元素放入另一个指定队列的最左边</span></span>
<span class="line"><span>opsForList.rightPopAndLeftPush(sourceKey, destinationKey);</span></span>
<span class="line"><span>opsForList.rightPopAndLeftPush(sourceKey, destinationKey, timeout, unit);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>//删除集合中值等于value的元素(index=0, 删除所有值等于value的元素; index&gt;0, 从头部开始删除第一个值等于value的元素; index&lt;0, 从尾部开始删除第一个值等于value的元素)</span></span>
<span class="line"><span>opsForList.remove(key, index, value);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Set类型</p></blockquote><p><strong>java</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>opsForSet.add(key, values);			//添加元素</span></span>
<span class="line"><span>opsForSet.remove(key, values);		//移除元素(单个值、多个值)</span></span>
<span class="line"><span>opsForSet.pop(key);					//删除并且返回一个随机的元素</span></span>
<span class="line"><span>opsForSet.size(key);				//获取集合的大小</span></span>
<span class="line"><span>opsForSet.isMember(key, value);		//判断集合是否包含value</span></span>
<span class="line"><span>opsForSet.intersect(key, otherKey);	//获取两个集合的交集(key对应的无序集合与otherKey对应的无序集合求交集)</span></span>
<span class="line"><span>opsForSet.intersect(key, otherKeys);//获取多个集合的交集(Collection var2)</span></span>
<span class="line"><span>opsForSet.intersectAndStore(key, otherKey, destKey);	//key集合与otherKey集合的交集存储到destKey集合中(其中otherKey可以为单个值或者集合)</span></span>
<span class="line"><span>opsForSet.intersectAndStore(key, otherKeys, destKey);	//key集合与多个集合的交集存储到destKey无序集合中</span></span>
<span class="line"><span>opsForSet.union(key, otherKeys);	//获取两个或者多个集合的并集(otherKeys可以为单个值或者是集合)</span></span>
<span class="line"><span>opsForSet.unionAndStore(key, otherKey, destKey);	//key集合与otherKey集合的并集存储到destKey中(otherKeys可以为单个值或者是集合)</span></span>
<span class="line"><span>opsForSet.difference(key, otherKeys);	//获取两个或者多个集合的差集(otherKeys可以为单个值或者是集合)</span></span>
<span class="line"><span>opsForSet.differenceAndStore(key, otherKey, destKey);	//差集存储到destKey中(otherKeys可以为单个值或者集合)</span></span>
<span class="line"><span>opsForSet.randomMember(key);	//随机获取集合中的一个元素</span></span>
<span class="line"><span>opsForSet.members(key);			//获取集合中的所有元素</span></span>
<span class="line"><span>opsForSet.randomMembers(key, count);	//随机获取集合中count个元素</span></span>
<span class="line"><span>opsForSet.distinctRandomMembers(key, count);	//获取多个key无序集合中的元素（去重），count表示个数</span></span>
<span class="line"><span>opsForSet.scan(key, options);	//遍历set类似于Interator(ScanOptions.NONE为显示所有的)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>zSet类型</p></blockquote><p><strong>java</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>opsForZSet.add(key, value, score);				//添加元素(有序集合是按照元素的score值由小到大进行排列)</span></span>
<span class="line"><span>opsForZSet.remove(key, values);					//删除对应的value,value可以为多个值</span></span>
<span class="line"><span>opsForZSet.incrementScore(key, value, delta);	//增加元素的score值，并返回增加后的值</span></span>
<span class="line"><span>opsForZSet.rank(key, value);					//返回元素在集合的排名,有序集合是按照元素的score值由小到大排列</span></span>
<span class="line"><span>opsForZSet.reverseRank(key, value);				//返回元素在集合的排名,按元素的score值由大到小排列</span></span>
<span class="line"><span>opsForZSet.reverseRangeWithScores(key, start,end);	//获取集合中给定区间的元素(start 开始位置，end 结束位置, -1查询所有)</span></span>
<span class="line"><span>opsForZSet.reverseRangeByScore(key, min, max);	//按照Score值查询集合中的元素，结果从小到大排序</span></span>
<span class="line"><span>opsForZSet.reverseRangeByScoreWithScores(key, min, max);	//返回值为:Set&lt;ZSetOperations.TypedTuple&lt;V&gt;&gt;</span></span>
<span class="line"><span>opsForZSet.count(key, min, max);				//根据score值获取集合元素数量</span></span>
<span class="line"><span>opsForZSet.size(key);							//获取集合的大小</span></span>
<span class="line"><span>opsForZSet.zCard(key);							//获取集合的大小</span></span>
<span class="line"><span>opsForZSet.score(key, value);					//获取集合中key、value元素对应的score值</span></span>
<span class="line"><span>opsForZSet.removeRange(key, start, end);		//移除指定索引位置处的成员</span></span>
<span class="line"><span>opsForZSet.removeRangeByScore(key, min, max);	//移除指定score范围的集合成员</span></span>
<span class="line"><span>opsForZSet.unionAndStore(key, otherKey, destKey);//获取key和otherKey的并集并存储在destKey中（其中otherKeys可以为单个字符串或者字符串集合）</span></span>
<span class="line"><span>opsForZSet.intersectAndStore(key, otherKey, destKey);	//获取key和otherKey的交集并存储在destKey中（其中otherKeys可以为单个字符串或者字符串集合）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>    原生的redistemplate使用了jdk的序列化，需要对象实现Serializable接口。内置的PgRedisTemplate</span></span>
<span class="line"><span>是通过jackson序列化配置过的，可以在不实现Serializable接口的情况下操作对象。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>java</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>if (defaultSerializer ==null) {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    defaultSerializer =newJdkSerializationRedisSerializer(</span></span>
<span class="line"><span>        classLoader !=null? classLoader :this.getClass().getClassLoader());</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>if (enableDefaultSerializer) {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>if (keySerializer ==null) {</span></span>
<span class="line"><span>        keySerializer = defaultSerializer;</span></span>
<span class="line"><span>        defaultUsed =true;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>if (valueSerializer ==null) {</span></span>
<span class="line"><span>        valueSerializer = defaultSerializer;</span></span>
<span class="line"><span>        defaultUsed =true;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>if (hashKeySerializer ==null) {</span></span>
<span class="line"><span>        hashKeySerializer = defaultSerializer;</span></span>
<span class="line"><span>        defaultUsed =true;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>if (hashValueSerializer ==null) {</span></span>
<span class="line"><span>        hashValueSerializer = defaultSerializer;</span></span>
<span class="line"><span>        defaultUsed =true;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><h4 id="技术原理" tabindex="-1"><a class="header-anchor" href="#技术原理"><span>技术原理</span></a></h4></blockquote><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>    首先是自动化配置类PgRedisAutoConfiguration</span></span>
<span class="line"><span>    主要是初始化了RedisTemplate工具及分布式锁、限制器的初始化。RedisTemplate使用了任意入参序列化的方式，</span></span>
<span class="line"><span>主要是值。这里的泛型配了Object，主要用于lua脚本的使用，直接使用字符串泛型会导致lua序列化生成多余引号。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>java</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>package com.kingtsoft.pangu.data.redis;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>/**</span></span>
<span class="line"><span> * Title: &lt;br&gt;</span></span>
<span class="line"><span> * Description: &lt;br&gt;</span></span>
<span class="line"><span> * Company: KingTang &lt;br&gt;</span></span>
<span class="line"><span> *</span></span>
<span class="line"><span> * @author 金炀</span></span>
<span class="line"><span> * @version 1.0</span></span>
<span class="line"><span> */</span></span>
<span class="line"><span>@Configuration</span></span>
<span class="line"><span>public class  PgRedisAutoConfiguration {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Bean</span></span>
<span class="line"><span>public RedisTemplate&lt;String, Object&gt; redisDefaultTemplate(RedisConnectionFactory factory) {</span></span>
<span class="line"><span>        RedisTemplate&lt;String, Object&gt; template =new RedisTemplate&lt;&gt;();</span></span>
<span class="line"><span>        template.setConnectionFactory(factory);</span></span>
<span class="line"><span>        Jackson2JsonRedisSerializer&lt;Object&gt; jackson2JsonRedisSerializer =new Jackson2JsonRedisSerializer&lt;&gt;(Object.class);</span></span>
<span class="line"><span>        ObjectMapper om =newObjectMapper();</span></span>
<span class="line"><span>        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span></span>
<span class="line"><span>        om.activateDefaultTyping(om.getPolymorphicTypeValidator(), ObjectMapper.DefaultTyping.NON_FINAL);</span></span>
<span class="line"><span>        jackson2JsonRedisSerializer.setObjectMapper(om);</span></span>
<span class="line"><span>        StringRedisSerializer stringRedisSerializer =newStringRedisSerializer();</span></span>
<span class="line"><span>// key采用String的序列化方式</span></span>
<span class="line"><span>        template.setKeySerializer(stringRedisSerializer);</span></span>
<span class="line"><span>// hash的key也采用String的序列化方式</span></span>
<span class="line"><span>        template.setHashKeySerializer(stringRedisSerializer);</span></span>
<span class="line"><span>// value序列化方式采用jackson</span></span>
<span class="line"><span>        template.setValueSerializer(jackson2JsonRedisSerializer);</span></span>
<span class="line"><span>// hash的value序列化方式采用jackson</span></span>
<span class="line"><span>        template.setHashValueSerializer(jackson2JsonRedisSerializer);</span></span>
<span class="line"><span>        template.afterPropertiesSet();</span></span>
<span class="line"><span>return template;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Bean</span></span>
<span class="line"><span>    @ConditionalOnMissingBean(SequenceTemplate.class)</span></span>
<span class="line"><span>public SequenceTemplate sequenceTemplate(@Qualifier(&quot;redisDefaultTemplate&quot;) RedisTemplate&lt;String, Object&gt; redisTemplate) {</span></span>
<span class="line"><span>returnnewRedisSequenceTemplate(redisTemplate);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Bean</span></span>
<span class="line"><span>    @ConditionalOnMissingBean(AccessSpeedLimit.class)</span></span>
<span class="line"><span>public AccessSpeedLimit accessSpeedLimit(@Qualifier(&quot;redisDefaultTemplate&quot;) RedisTemplate&lt;String, Object&gt; redisTemplate) {</span></span>
<span class="line"><span>returnnewAccessSpeedLimit(redisTemplate);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Bean</span></span>
<span class="line"><span>    @ConditionalOnMissingBean(DistributedLockTemplate.class)</span></span>
<span class="line"><span>public DistributedLockTemplate distributedLockTemplate(@Qualifier(&quot;redisDefaultTemplate&quot;) RedisTemplate&lt;String, Object&gt; redisTemplate) {</span></span>
<span class="line"><span>returnnewRedisDistributedLockTemplate(redisTemplate);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>限制单纯是脚本功能，通过入参LimitRule控制访问频率</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>java</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>publicboolean  tryAccess(String key, int seconds, int limitCount) {</span></span>
<span class="line"><span>        LimitRule limitRule =newLimitRule();</span></span>
<span class="line"><span>        limitRule.setLimitCount(limitCount);</span></span>
<span class="line"><span>        limitRule.setSeconds(seconds);</span></span>
<span class="line"><span>returntryAccess(key, limitRule);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 针对资源key,每limitRule.seconds秒最多访问limitRule.limitCount,超过limitCount次返回false</span></span>
<span class="line"><span>     * 超过lockCount 锁定lockTime</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @paramkey</span></span>
<span class="line"><span>     * @paramlimitRule</span></span>
<span class="line"><span>     * @return</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>publicboolean  tryAccess(String key, LimitRule limitRule) {</span></span>
<span class="line"><span>        String newKey =&quot;Limit:&quot;+ key;</span></span>
<span class="line"><span>        List&lt;String&gt; keys =new ArrayList&lt;&gt;();</span></span>
<span class="line"><span>        keys.add(newKey);</span></span>
<span class="line"><span>        List&lt;Object&gt; args =new ArrayList&lt;&gt;();</span></span>
<span class="line"><span>        args.add(Math.max(limitRule.getLimitCount(), limitRule.getLockCount()));</span></span>
<span class="line"><span>        args.add(limitRule.getSeconds());</span></span>
<span class="line"><span>        args.add(limitRule.getLockCount());</span></span>
<span class="line"><span>        args.add(limitRule.getLockTime());</span></span>
<span class="line"><span>        args.add(limitRule.enableLimitLock() ?1:0);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        long  ret = redisTemplate.execute(redisScript, keys, args.toArray());</span></span>
<span class="line"><span>if (ret ==null) {</span></span>
<span class="line"><span>thrownewRuntimeException(&quot;tryAccess异常&quot;);</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>return ret &lt;= limitRule.getLimitCount();</span></span>
<span class="line"><span>    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,40)]))}const r=n(l,[["render",p],["__file","Redis(直连模式).html.vue"]]),v=JSON.parse('{"path":"/%E7%9B%98%E5%8F%A4/%E4%B8%AD%E9%97%B4%E4%BB%B6/Redis(%E7%9B%B4%E8%BF%9E%E6%A8%A1%E5%BC%8F).html","title":"Redis模块（直连模式）","lang":"zh-CN","frontmatter":{"description":"Redis模块（直连模式） 如何使用 xml java PgRedisTemplate工具 java 常用方法 java String类型 java Hash类型 java List类型 java Set类型 java zSet类型 java 注意 java 技术原理 java java","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/%E7%9B%98%E5%8F%A4/%E4%B8%AD%E9%97%B4%E4%BB%B6/Redis(%E7%9B%B4%E8%BF%9E%E6%A8%A1%E5%BC%8F).html"}],["meta",{"property":"og:title","content":"Redis模块（直连模式）"}],["meta",{"property":"og:description","content":"Redis模块（直连模式） 如何使用 xml java PgRedisTemplate工具 java 常用方法 java String类型 java Hash类型 java List类型 java Set类型 java zSet类型 java 注意 java 技术原理 java java"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-18T07:25:41.000Z"}],["meta",{"property":"article:author","content":"Cotton Eye Joe"}],["meta",{"property":"article:modified_time","content":"2024-11-18T07:25:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Redis模块（直连模式）\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-18T07:25:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cotton Eye Joe\\",\\"url\\":\\"https://github.com/ToDreamr\\"}]}"]]},"headers":[],"git":{"createdTime":1731914741000,"updatedTime":1731914741000,"contributors":[{"name":"九歌天上有","email":"aruixrain@gmail.com","commits":1}]},"readingTime":{"minutes":16.05,"words":4814},"filePathRelative":"盘古/中间件/Redis(直连模式).md","localizedDate":"2024年11月18日","excerpt":"","autoDesc":true}');export{r as comp,v as data};
