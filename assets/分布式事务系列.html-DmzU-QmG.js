import{_ as e,o as n,c as a,d as i}from"./app-ux1ElDeN.js";const l={};function t(p,s){return n(),a("div",null,s[0]||(s[0]=[i(`<h1 id="分布式事务模块" tabindex="-1"><a class="header-anchor" href="#分布式事务模块"><span>分布式事务模块</span></a></h1><blockquote><h4 id="如何使用" tabindex="-1"><a class="header-anchor" href="#如何使用"><span>如何使用</span></a></h4></blockquote><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>引入如下包获取seata的支持</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>xml</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&lt;dependency&gt;</span></span>
<span class="line"><span>  &lt;groupId&gt;com.kingtsoft.pangu&lt;/groupId&gt;</span></span>
<span class="line"><span>  &lt;artifactId&gt;pangu-data-seata&lt;/artifactId&gt;</span></span>
<span class="line"><span>  &lt;version&gt;\${pangu.version}&lt;/version&gt;</span></span>
<span class="line"><span>&lt;/dependency&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>    通过使用seata的GlobalTransactional注解进行分布式事务配置，可以之际而是用</span></span>
<span class="line"><span>RootContext.getXID());获取当前上下文事务ID。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>java</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>@GlobalTransactional</span></span>
<span class="line"><span>private void  doInsert(long  poolSn) {</span></span>
<span class="line"><span>    OisRegSchedulePool oisRegSchedulePool =newOisRegSchedulePool();</span></span>
<span class="line"><span>    log.info(&quot;当前 XID: {}&quot;, RootContext.getXID());</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    oisRegSchedulePool.setPoolSn(poolSn);</span></span>
<span class="line"><span>    oisRegSchedulePool.setState(1);</span></span>
<span class="line"><span>    oisRegSchedulePool.setPoolCode(poolSn.toString());</span></span>
<span class="line"><span></span></span>
<span class="line"><span>int i = oisRegSchedulePoolMapper.insert(oisRegSchedulePool);</span></span>
<span class="line"><span>    System.out.println(i);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><h4 id="技术原理" tabindex="-1"><a class="header-anchor" href="#技术原理"><span>技术原理</span></a></h4></blockquote><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>    seata本身是通过回滚日志的形式保持事务一致，所以首先必须保证双方都出于同一个库内</span></span>
<span class="line"><span>（除非是级联嵌套A套B，B套C）否则因为异常不会被捕捉导致回滚失败。当然如果服务在同一个</span></span>
<span class="line"><span>进程内由多数据源框架控制，就可以支持了。因为内部会协调上下文ID的传递及方法切换捕捉。</span></span>
<span class="line"><span>pangu中封装的为seata上下文ID在web请求及feign的请求中传递的内容。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>java</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>public class  FeignSeataRequestInterceptorimplementsRequestInterceptor {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>private void   apply(RequestTemplate requestTemplate) {</span></span>
<span class="line"><span>        String xid = RootContext.getXID();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>if (ObjectUtils.isEmpty(xid)) {</span></span>
<span class="line"><span>return;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        List&lt;String&gt; seataXid =new ArrayList&lt;&gt;();</span></span>
<span class="line"><span>        seataXid.add(xid);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        requestTemplate.header(RootContext.KEY_XID, seataXid);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12)]))}const r=e(l,[["render",t],["__file","分布式事务系列.html.vue"]]),o=JSON.parse('{"path":"/%E7%9B%98%E5%8F%A4/%E6%95%B0%E6%8D%AE%E6%BA%90/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E7%B3%BB%E5%88%97.html","title":"分布式事务模块","lang":"zh-CN","frontmatter":{"description":"分布式事务模块 如何使用 xml java 技术原理 java","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/%E7%9B%98%E5%8F%A4/%E6%95%B0%E6%8D%AE%E6%BA%90/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E7%B3%BB%E5%88%97.html"}],["meta",{"property":"og:title","content":"分布式事务模块"}],["meta",{"property":"og:description","content":"分布式事务模块 如何使用 xml java 技术原理 java"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-18T07:25:41.000Z"}],["meta",{"property":"article:author","content":"Cotton Eye Joe"}],["meta",{"property":"article:modified_time","content":"2024-11-18T07:25:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"分布式事务模块\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-18T07:25:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cotton Eye Joe\\",\\"url\\":\\"https://github.com/ToDreamr\\"}]}"]]},"headers":[],"git":{"createdTime":1731914741000,"updatedTime":1731914741000,"contributors":[{"name":"九歌天上有","email":"aruixrain@gmail.com","commits":1}]},"readingTime":{"minutes":0.91,"words":272},"filePathRelative":"盘古/数据源/分布式事务系列.md","localizedDate":"2024年11月18日","excerpt":"","autoDesc":true}');export{r as comp,o as data};
