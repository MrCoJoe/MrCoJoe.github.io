import{_ as t,o as a,c as o,d as c}from"./app-CA6hDfjR.js";const d={};function r(s,e){return a(),o("div",null,e[0]||(e[0]=[c('<h1 id="mvcc机制" tabindex="-1"><a class="header-anchor" href="#mvcc机制"><span>MVCC机制</span></a></h1><blockquote><p>当一个事务要对数据库中的数据进行修改时，MVCC 会为该事务创建一个数据快照，而不是直接修改实际的数据行。</p></blockquote><p>一致性非锁定读（读取数据的时候为了保证数据的一致性，没有锁定，通过版本号）</p><blockquote><p>如果读取的行正在执行 DELETE 或 UPDATE 操作，这时读取操作不会去等待行上锁的释放。相反地，InnoDB 存储引擎会去读取行的一个快照数据，对于这种读取历史数据的方式，我们叫它快照读 &gt;(snapshot read)</p></blockquote><p>锁定读如果执行的是下列语句，就是 锁定读（Locking Reads） select ... lock in share mode</p><p>select ... for updateinsert、update、</p><p>delete</p><p>操作在锁定读下，读取的是数据的最新版本，这种读也被称为 当前读（current read）。锁定读会对读取到的记录加锁：select ... lock in share mode：对记录加 S 锁，其它事务也可以加S锁，如果加 x 锁则会被阻塞select ... for update、insert、update、delete：对记录加 X 锁，且其它事务不能加任何锁在一致性非锁定读下，即使读取的记录已被其它事务加上 X 锁，这时记录也是可以被读取的，即读取的快照数据。上面说了，在 Repeatable Read 下 MVCC 防止了部分幻读，这边的 “部分” 是指在 一致性非锁定读 情况下，只能读取到第一次查询之前所插入的数据（根据 Read View 判断数据可见性，Read View 在第一次查询时生成）。但是！如果是 当前读 ，每次读取的都是最新数据，这时如果两次查询中间有其它事务插入数据，就会产生幻读。所以， InnoDB 在实现Repeatable Read 时，如果执行的是当前读，则会对读取的记录使用 Next-key Lock ，来防止其它事务在间隙间插入数据</p>',8)]))}const n=t(d,[["render",r],["__file","多版本并发控制事务.html.vue"]]),i=JSON.parse('{"path":"/doc/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/%E5%A4%9A%E7%89%88%E6%9C%AC%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%BA%8B%E5%8A%A1.html","title":"MVCC机制","lang":"zh-CN","frontmatter":{"feed":false,"seo":false,"head":[]},"headers":[],"git":{"createdTime":1731914741000,"updatedTime":1731914741000,"contributors":[{"name":"九歌天上有","email":"aruixrain@gmail.com","commits":1}]},"readingTime":{"minutes":1.66,"words":497},"filePathRelative":"doc/数据库/MySQL/多版本并发控制事务.md","localizedDate":"2024年11月18日"}');export{n as comp,i as data};
